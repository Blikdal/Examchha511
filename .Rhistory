#set.seed(1) #just to test for myself
#y <- rgamma(10000, 1) # -"-
#' @export
#' @author Christian Blikdal Hansen
#' @title KDE (Kernel Density Estimator)
#' @keywords Density Kernel_Density Estimator Sturges_Naive Kernel_Gaussian
#' @return "Quantiles and mean" or "density at d"
#' @example KDE(x, method="gaussian")
#' @param x <- data set
#' @param d <- point of estimation
#' @param h <- bandwith
#' @param method <- "naive" or "gaussian
KDE <- function(x, d=0, h=0, method="naive"){
vector <- c()
if(d==0){ # if d not specified, the function will return quantiles:
Q = as.numeric(quantile(x)) #using the quantile() to find max, min, 1st quantile, 3th quantile and median
Q = append(Q, mean(x)) # appending the mean
Q = sapply(Q, function(q) KDE(x, q, h, method)) #applying the function
Quantiles <- matrix(c(Q[1], Q[2], Q[3], Q[4], Q[5], Q[6]), nrow=1, byrow=TRUE)
rownames(Quantiles) <- c("probalility") #naming
colnames(Quantiles) <- c("min", "first quantile", "median", "third qunatile", "max", "mean") #naming
return(Quantiles)
}
#for naive method
if(method == "naive"){
if(h==0){ # if the bandwith is not specified
h <- (max(x)-min(x))/(1+log2(length(x))) #h from sturges formula
}
for(i in 1:length(x)){ #creating a vector
if(abs((d-x[i])/h)<1){
vector <- append(vector, 0.5)
}
}
return((1/(length(x)*h))*sum(vector))
}
#for gaussian method
else if(method == "gaussian"){
if(h==0){
h <- 0.9*sd(x)*length(x)^(-1/5)
}
for(i in 1:length(x)){
vector <- append(vector,(1/sqrt(2*pi))*exp(-((d-x[i])/h)^2/2))
}
return(1/(length(x)*h)*sum(vector))
}
else{
return("unknown method")
}
}
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=0, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
if(n==0){
n <- 500 #default value for n is 500
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d, method=method))
}
plot(C)
}
densityplot(x,method="gaussian", 1, 2)
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=0, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
if(n==0){
n <- 500 #default value for n is 500
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d, method=method))
}
plot(C)
}
faithfull <- getDataPart(faithful) #the required data
eruption <- faithfull[1]
eruptions
eruption
KDE(1, 1, 1)
KDE(1, 1,)
KDE(1, 1)
KDE(eruptions)
KDE(eruptions, 1, method="naive" )
KDE(eruption, 1, method="naive" )
KDE(eruption, N=200, method="naive" )
KDE(eruption, n=200, method="naive" )
KDE(eruption, n=200, method="gaussian" )
# this fuction will estimate the kernel density estimator
#set.seed(1) #just to test for myself
#y <- rgamma(10000, 1) # -"-
#' @export
#' @author Christian Blikdal Hansen
#' @title KDE (Kernel Density Estimator)
#' @keywords Density Kernel_Density Estimator Sturges_Naive Kernel_Gaussian
#' @return "Quantiles and mean" or "density at d"
#' @example KDE(x, method="gaussian")
#' @param x <- data set
#' @param d <- point of estimation
#' @param h <- bandwith
#' @param method <- "naive" or "gaussian
KDE <- function(x, d=0, h=0, method="naive"){
vector <- c()
if(d==0){ # if d not specified, the function will return quantiles:
Q = as.numeric(quantile(x)) #using the quantile() to find max, min, 1st quantile, 3th quantile and median
Q = append(Q, mean(x)) # appending the mean
Q = sapply(Q, function(q) KDE(x, q, h, method)) #applying the function
Quantiles <- matrix(c(Q[1], Q[2], Q[3], Q[4], Q[5], Q[6]), nrow=1, byrow=TRUE)
rownames(Quantiles) <- c("probalility") #naming
colnames(Quantiles) <- c("min", "first quantile", "median", "third qunatile", "max", "mean") #naming
return(Quantiles)
}
#for naive method
if(method == "naive"){
if(h==0){ # if the bandwith is not specified
h <- (max(x)-min(x))/(1+log2(length(x))) #h from sturges formula
}
for(i in 1:length(x)){ #creating a vector
if(abs((d-x[i])/h)<1){
vector <- append(vector, 0.5)
}
}
return((1/(length(x)*h))*sum(vector))
}
#for gaussian method
else if(method == "gaussian"){
if(h==0){
h <- 0.9*sd(x)*length(x)^(-1/5)
}
for(i in 1:length(x)){
vector <- append(vector,(1/sqrt(2*pi))*exp(-((d-x[i])/h)^2/2))
}
return(1/(length(x)*h)*sum(vector))
}
else{
return("unknown method")
}
}
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=0, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
if(n==0){
n <- 500 #default value for n is 500
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d, method=method))
}
plot(C)
}
getDataPart(faithful) #the required data
eruption <- faithfull[1] #specifying eruption
eruptions
eruption
KDE(faithful[,1], n=200, method="naive" )
KDE(faithful[,1], method="naive" )
KDE(faithful[,1], method="gaussian" )
densityplot(faithful[,1]), n=200)
densityplot(faithful[,1]), n=200, method="gaussian")
eruption <- faithfull[,1] #specifying eruption
getDataPart(faithful) #the required data
eruption <- faithful[,1] #specifying eruption
eruption
KDE(faithful[,1], method="naive" )
KDE(eruption, method="naive" )
KDE(eruption, method="gaussian" )
densityplot(eruption, n=200)
densityplot(eruption, n=1)
y <- rbeta(1000, 2.5, 5,5)
hist(y)
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
simulations=10000
X <- c(rep(runif(1),simulations))# initialize the chain
count=0
for (i in 2:simulations){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
curve(dbeta(simulations, 2.5, 5.5), add=TRUE)
abline(curve(dbeta(simulations, 2.5, 5.5), add=TRUE))
abline(curve(x, 2.5, 5.5), add=TRUE))
hist(X, probability = TRUE)
y <- rbeta(1000, 2.5, 5,5)
hist(y)
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
simulations=10000
X <- c(rep(runif(1),simulations))# initialize the chain
count=0
for (i in 2:simulations){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
partofchain <- plot(X, xlim = c(5000, 5200),type='l') #lige betyder samme vÃ¦rdi, dette er opg b
hist(X, probability = TRUE)
hist(y)
y <- rbeta(10000, 2.5, 5,5)
hist(y)
hist(X, probability = TRUE)
y <- rbeta(10000, 2.5, 5,5)
hist(y)
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
simulations=10000
X <- c(rep(runif(1),simulations))# initialize the chain
count=0
for (i in 2:simulations){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
curve(dbeta(simulations), a, b, add=TRUE, col='red')
hist(X, probability = TRUE)
curve(dbeta(simulations), a, b, add=TRUE, col='red')
curve(10000, 2.5, 5.5, add=TRUE, col='red')
curve(dbeta(10000, 2.5, 5.5), add=TRUE, col='red')
curve(dbeta(simulations, 2.5, 5.5), add=TRUE, col='red')
curve(dbeta(X, 2.5, 5.5), add=TRUE, col='red')
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
simulations=10000
X <- c(rep(runif(1),simulations))# initialize the chain
count=0
for (i in 2:simulations){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
n=10000 # number of simulations
X <- c(rep(runif(1), n))# initialize the chain
count=0
for (i in 2:n){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
n=10000 # number of simulations
X <- c(rep(runif(1), n))# initialize the chain
count=0
for (i in 2:n){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
curve(dbeta(X, 2.5, 5.5), add=TRUE, col='red')
curve(dbeta(x, 2.5, 5.5), add=TRUE, col='red')
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
n=10000 # number of simulations
X <- c(rep(runif(1), n))# initialize the chain
count=0
for (i in 2:n){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
curve(dbeta(x, 2.5, 5.5), add=TRUE, col='red')
a=2.5; b=5.5 # parameters we want to simulate from the Beta distribution
n=10000 # number of simulations
X <- c(rep(runif(1), n))# initialize the chain
count=0
for (i in 2:n){
Y=runif(1)
Z=dbeta(Y,a,b)/dbeta(X[i-1],a,b)
if(runif(1)<Z){
X[i]=X[i-1] + (Y-X[i-1])
}
else{X[i]=X[i-1]
count=count+1}
}
hist(X, probability = TRUE)
curve(dbeta(x, 2.5, 5.5), add=TRUE, col='red')
stationarydist(A, 3, 10000)
#' @export
#' @author Christian Blikdal Hansen
#' @title stationarydist
#' @keywords Stationary_Distibution Transition_Probability_Matrix Simulation
#' @return Transition distribution for each state
#' @example KDE(A, 3, 10000)
#' @param p <- transition probability matrix
#' @param k <- initial state
#' @param n <- number of simulated steps
# from the information in the diagram, I make the following matrix, A:
# the function has to take 3 things into consideration: n, k and p
#n <- 10000 # is the number of simulations
#k <-  is the initial step
#p <-  is the probability from the diagram, transformed into matrix, A:
stationarydist <-function(p, k, n){
simstate <- c()
#this is the stationary distrbution, that we want to simulate, the probabily to be instate i={1,...,6}
for(i in 1:dim(A)[1]){
simstate <- append(simstate, 0)
}
state <- k
for(i in 1:n){
probability=0
U <- runif(1)
for(i in 1:dim(p)){
if(U <= p[state,i]+probability && U > probability){
state=i
simstate[i] <- simstate[i]+1
break
}
probability <- probability+p[state,i]
}
}
return(simstate/n)
}
A <- matrix(c(0.2, 0.7, 0, 0, 0, 0.1, 0.3, 0, 0.7, 0, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0.9, 0.1, 0, 0, 0, 0, 0.25, 0.5, 0.25, 0.4, 0, 0, 0,  0.4, 0.2), nrow=6, ncol=6, byrow=TRUE)
stationarydist(A, 3, 10000)
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=0, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
if(n==0){
n <- 500 #default value for n is 500
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d, method=method))
}
plot(C)
}
KDE(eruption, method="naive" )
KDE(eruption, method="gaussian" )
densityplot(eruption, n=200)
KDE(eruption, method="naive" )
KDE(eruption, method="gaussian" )
densityplot(eruption, n=200)
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=0, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
if(n==0){
n <- 500 #default value for n is 500
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d= d, method=method))
}
plot(C)
}
densityplot(eruption, n=200)
densityplot(faithful[,1]), n=200, method="gaussian")
densityplot(eruption, n=200, method="gaussian")
#' @export
#' @author Christian Blikdal Hansen
#' @note has to be used with KDE
#' @title densityplot
#' @keywords density_plot
#' @return densityplot
#' @example densityplot()
#' @param x <- data
#' @param n <- number of points in the plot
#' @param method <- "naive"(default) or "gaussian"
#' @param from <- start point of the plot
#' @param to <- end point of plot
densityplot <- function(x, n=500, method="naive", from="", to=""){
C <- c()
if(from==""){
from <- min(x)-sd(x)/3 #this gives the default value of the start point of the plot
}
if(to==""){
to <- max(x)+sd(x)/3 #this gives the default value of the end point of the plot
}
if(method!="naive" && method!="gaussian"){
return("not a specified method") #can not calculate for other methods
}
for(i in 1:n){
d <- ((from-to)*i)/n
C <- append(C, KDE(x, d= d, method=method))
}
plot(C)
}
getDataPart(faithful) #the required data
eruption <- faithful[,1] #specifying eruption
KDE(eruption, method="naive" )
KDE(eruption, method="gaussian" )
densityplot(eruption, n=200)
densityplot(eruption, n=200, method="gaussian")
